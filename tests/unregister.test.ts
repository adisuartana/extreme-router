import { beforeEach, describe, it, expect } from 'vitest';
import TestExtreme from './test-util';
import { param } from '../src/plugins/param';
import { prefixGroup } from '../src/plugins/prefixGroup';
import { optionalPrefixGroup } from '../src/plugins/optionalPrefixGroup';
import { groupParam } from '../src/plugins/groupParam';
import { regexParam } from '../src/plugins/regexParam';
import { extensionParam } from '../src/plugins/extensionParam';
import { optionalParam } from '../src/plugins/optionalParam';
import { wildcard } from '../src/plugins/wildcard';

describe('Extreme Router - UnRegister() API', () => {
  let testExtreme: TestExtreme;
  type TestStore = { storeId: 'test' };
  const testStore: TestStore = { storeId: 'test' };

  beforeEach(() => {
    testExtreme = new TestExtreme<TestStore>({
      storeFactory: () => testStore,
      plugins: [
        param,
        prefixGroup,
        optionalPrefixGroup,
        groupParam,
        regexParam,
        extensionParam,
        optionalParam,
        wildcard,
      ],
    });
  });
  it('should unregister a root route', () => {
    testExtreme.register('/');
    expect(testExtreme.inspect().length).toBe(1);
    testExtreme.unregister('/');
    expect(testExtreme.inspect().length).toBe(0);
  });
  it('should unregister a static route', () => {
    testExtreme.register('/test');
    expect(testExtreme.inspect().length).toBe(1);
    testExtreme.unregister('/test');
    expect(testExtreme.inspect().length).toBe(0);
  });
  it('should unregister a prefix group route', () => {
    testExtreme.register('/prefix(a|b)');
    expect(testExtreme.inspect().length).toBe(1);
    testExtreme.unregister('/prefix(a|b)');
    expect(testExtreme.inspect().length).toBe(0);
  });
  it('should unregister a optional prefix group route', () => {
    testExtreme.register('/prefix(a|b)?');
    expect(testExtreme.inspect().length).toBe(1);
    testExtreme.unregister('/prefix(a|b)?');
    expect(testExtreme.inspect().length).toBe(0);
  });
  it('should unregister a group param route', () => {
    testExtreme.register('/:group(a|b)');
    expect(testExtreme.inspect().length).toBe(1);
    testExtreme.unregister('/:group(a|b)');
    expect(testExtreme.inspect().length).toBe(0);
  });
  it('should unregister a regex param route', () => {
    testExtreme.register('/:param<\\d+>');
    expect(testExtreme.inspect().length).toBe(1);
    testExtreme.unregister('/:param<\\d+>');
    expect(testExtreme.inspect().length).toBe(0);
  });
  it('should unregister a extension param route', () => {
    testExtreme.register('/:param.ext');
    expect(testExtreme.inspect().length).toBe(1);
    testExtreme.unregister('/:param.ext');
    expect(testExtreme.inspect().length).toBe(0);
  });
  it('should unregister a optional param route', () => {
    testExtreme.register('/:param?');
    expect(testExtreme.inspect().length).toBe(2);
    testExtreme.unregister('/:param?');
    expect(testExtreme.inspect().length).toBe(0);
  });
  it('should unregister a param route', () => {
    testExtreme.register('/:param');
    expect(testExtreme.inspect().length).toBe(1);
    testExtreme.unregister('/:param');
    expect(testExtreme.inspect().length).toBe(0);
  });
  it('should unregister a wildcard route', () => {
    testExtreme.register('/*');
    expect(testExtreme.inspect().length).toBe(1);
    testExtreme.unregister('/*');
    expect(testExtreme.inspect().length).toBe(0);

    testExtreme.register('/:wild*');
    expect(testExtreme.inspect().length).toBe(1);
    testExtreme.unregister('/:wild*');
    expect(testExtreme.inspect().length).toBe(0);
  });
  it('should unregister a all combinations of optional param', () => {
    testExtreme.register('/:optional?');
    // Its generates 2 routes: '/' and '/:optional?'
    expect(testExtreme.inspect().length).toBe(2);
    testExtreme.unregister('/:optional?');
    expect(testExtreme.inspect().length).toBe(0);

    testExtreme.register('/static/:optional?/extra');
    // Its generates 2 routes: '/static/extra' and '/static/:optional?/extra'
    expect(testExtreme.inspect().length).toBe(2);
    testExtreme.unregister('/static/:optional?/extra');
    expect(testExtreme.inspect().length).toBe(0);

    testExtreme.register('/static/:optional?/:optional2?');
    // Its generates 4 routes: '/static', '/static/:optional?' and '/static/:optional2?' and '/static/:optional?/:optional2?'
    expect(testExtreme.inspect().length).toBe(4);

    testExtreme.unregister('/static/:optional?/:optional2?');
    expect(testExtreme.inspect().length).toBe(0);
  });
  it('should unregister a static route generated by optional param and preserve the dynamics', () => {
    testExtreme.register('/static/:optional?');
    // Its generates 2 routes: '/static' and '/static/:optional?'
    expect(testExtreme.inspect().length).toBe(2);
    testExtreme.unregister('/static');
    expect(testExtreme.inspect().length).toBe(1);
  });
  it('should unregister shared node and preserve the chain of routes', () => {
    testExtreme.register('/static/:param');
    testExtreme.register('/static/:param/:param2');
    testExtreme.register('/static/:param/:param2/test');

    expect(testExtreme.inspect().length).toBe(3);

    testExtreme.unregister('/static/:param');
    expect(testExtreme.inspect().length).toBe(2);
    expect(testExtreme.inspect()[0]?.path).toBe('/static/:param/:param2');
    expect(testExtreme.inspect()[1]?.path).toBe('/static/:param/:param2/test');
  });
  it('should unregister terminal node and preserve the chain of routes', () => {
    testExtreme.register('/static/:param');
    testExtreme.register('/static/:param/:param2');
    testExtreme.register('/static/:param/:param2/test');

    expect(testExtreme.inspect().length).toBe(3);

    testExtreme.unregister('/static/:param/:param2/test');
    expect(testExtreme.inspect().length).toBe(2);
    expect(testExtreme.inspect()[0]?.path).toBe('/static/:param');
    expect(testExtreme.inspect()[1]?.path).toBe('/static/:param/:param2');
  });
  it('should return false if a static route is not registered', () => {
    testExtreme.register('/static');
    expect(testExtreme.inspect().length).toBe(1);
    expect(testExtreme.unregister('/other')).toBe(false);
    expect(testExtreme.inspect().length).toBe(1);
  });
  it('should return false if a dynamic route is not registered', () => {
    testExtreme.register('/:param');
    expect(testExtreme.inspect().length).toBe(1);
    expect(testExtreme.unregister('/:param2')).toBe(false);
    expect(testExtreme.inspect().length).toBe(1);
  });
  it('should return false if no store is registered', () => {
    testExtreme.register('/:id');
    const root = testExtreme.getRoot();
    if (root && root.dynamicChildren && root.dynamicChildren.length > 0 && root.dynamicChildren[0]) {
      root.dynamicChildren[0].store = undefined;
    }
    expect(testExtreme.unregister('/:id')).toBe(false);
  });
  it('should unregister a complex route', () => {
    testExtreme.register('/static/:param(a|b)/:param2?/another/:param3<\\d+>/test/:optional?/*');
    expect(testExtreme.inspect().length).toBe(4);
    testExtreme.unregister('/static/:param(a|b)/:param2?/another/:param3<\\d+>/test/:optional?/*');
    expect(testExtreme.inspect().length).toBe(0);
  });
});
